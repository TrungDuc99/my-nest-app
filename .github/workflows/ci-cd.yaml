name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - production
  pull_request:
    branches:
      - development
      - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps --force

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm test

  build-and-push:
    needs: build-and-test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug Docker login
        run: |
          echo "Docker login step completed"
          echo "Using username: ${{ secrets.DOCKERHUB_USERNAME != '' && 'Username is set' || 'Username is NOT set' }}"
          echo "Using token: ${{ secrets.DOCKERHUB_TOKEN != '' && 'Token is set' || 'Token is NOT set' }}"

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set environment variables based on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "development" ]; then
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          elif [ "${{ env.BRANCH_NAME }}" = "production" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "TAG=prod" >> $GITHUB_ENV
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ducdt1999/nestjs-app:${{ env.TAG }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
          cache-from: type=registry,ref=ducdt1999/nestjs-app:${{ env.TAG }}
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set environment variables based on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "development" ]; then
            echo "APP_NAME=nestjs-app-dev" >> $GITHUB_ENV
            echo "NAMESPACE=nestjs-app-dev" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          elif [ "${{ env.BRANCH_NAME }}" = "production" ]; then
            echo "APP_NAME=nestjs-app-prod" >> $GITHUB_ENV
            echo "NAMESPACE=nestjs-app" >> $GITHUB_ENV
            echo "TAG=prod" >> $GITHUB_ENV
          fi

      - name: Debug Environment Variables
        run: |
          echo "APP_NAME: ${{ env.APP_NAME }}"
          echo "NAMESPACE: ${{ env.NAMESPACE }}"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "TAG: ${{ env.TAG }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=./kubeconfig
          echo "Kiểm tra kết nối đến Kubernetes cluster..."
          kubectl get nodes

      - name: Update Deployment
        run: |
          export KUBECONFIG=./kubeconfig

          echo "Checking if namespace exists..."
          kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}

          echo "Checking if deployment exists..."
          if kubectl get deployment nestjs-app -n ${{ env.NAMESPACE }} 2>/dev/null; then
            echo "Updating existing deployment..."
            kubectl set image deployment/nestjs-app nestjs-app=ducdt1999/nestjs-app:${{ env.TAG }} -n ${{ env.NAMESPACE }}
          else
            echo "Creating new deployment from manifest..."
            # Áp dụng file deployment từ repository với kustomize
            kubectl apply -k kubernetes/overlays/${{ env.BRANCH_NAME }} -n ${{ env.NAMESPACE }}
          fi

          echo "Checking deployment rollout status..."
          kubectl rollout status deployment/nestjs-app -n ${{ env.NAMESPACE }} --timeout=120s

          echo "Deployment information:"
          kubectl get deployment nestjs-app -n ${{ env.NAMESPACE }} -o wide
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=nestjs-app
