name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - production
  pull_request:
    branches:
      - development
      - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps --force

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm test

  build-and-push:
    needs: build-and-test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug Docker login
        run: |
          echo "Docker login step completed"
          echo "Using username: ${{ secrets.DOCKERHUB_USERNAME != '' && 'Username is set' || 'Username is NOT set' }}"
          echo "Using token: ${{ secrets.DOCKERHUB_TOKEN != '' && 'Token is set' || 'Token is NOT set' }}"

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set environment variables based on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "development" ]; then
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          elif [ "${{ env.BRANCH_NAME }}" = "production" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "TAG=prod" >> $GITHUB_ENV
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ducdt1999/nestjs-app:${{ env.TAG }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
          cache-from: type=registry,ref=ducdt1999/nestjs-app:${{ env.TAG }}
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set environment variables based on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "development" ]; then
            echo "APP_NAME=nestjs-app-dev" >> $GITHUB_ENV
            echo "NAMESPACE=nestjs-app-dev" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          elif [ "${{ env.BRANCH_NAME }}" = "production" ]; then
            echo "APP_NAME=nestjs-app-prod" >> $GITHUB_ENV
            echo "NAMESPACE=nestjs-app" >> $GITHUB_ENV
            echo "TAG=prod" >> $GITHUB_ENV
          fi

      - name: Debug Environment Variables
        run: |
          echo "APP_NAME: ${{ env.APP_NAME }}"
          echo "NAMESPACE: ${{ env.NAMESPACE }}"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "TAG: ${{ env.TAG }}"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Debug Kubernetes Configuration Before
        run: |
          echo "Current KUBECONFIG: $KUBECONFIG"
          kubectl config view || echo "No kubectl config found"
          echo "Current HOME directory: $HOME"
          ls -la ~/.kube || echo "No .kube directory"

      - name: Check KUBE_CONFIG secret
        run: |
          # Kiểm tra xem secret KUBE_CONFIG có tồn tại không
          if [ -z "${{ secrets.KUBE_CONFIG }}" ]; then
            echo "ERROR: KUBE_CONFIG secret is empty or not set!"
            exit 1
          fi

          # Kiểm tra độ dài của secret
          CONFIG_LENGTH=$(echo "${{ secrets.KUBE_CONFIG }}" | wc -c)
          echo "KUBE_CONFIG length: $CONFIG_LENGTH characters"

          # Kiểm tra nếu config có chứa các thành phần cần thiết (không hiển thị toàn bộ nội dung)
          echo "Checking for essential components in KUBE_CONFIG:"
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "apiVersion:" && echo "- apiVersion: Found" || echo "- apiVersion: MISSING!"
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "clusters:" && echo "- clusters: Found" || echo "- clusters: MISSING!"
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "users:" && echo "- users: Found" || echo "- users: MISSING!"
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "contexts:" && echo "- contexts: Found" || echo "- contexts: MISSING!"
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "current-context:" && echo "- current-context: Found" || echo "- current-context: MISSING!"

          # Kiểm tra nếu có token hoặc cert (không hiển thị giá trị cụ thể)
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "token:" && echo "- Authentication token: Found" || echo "- Authentication token: MISSING!"
          echo "${{ secrets.KUBE_CONFIG }}" | grep -q "certificate-authority-data:" && echo "- CA data: Found" || echo "- CA data: Not found (but might not be required)"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          # Kiểm tra nội dung kubeconfig để đảm bảo hợp lệ
          echo "Kiểm tra nội dung kubeconfig..."
          grep "server:" kubeconfig.yaml || echo "Không tìm thấy thông tin server trong kubeconfig"
          echo "Kiểm tra thông tin xác thực..."
          grep "token:" kubeconfig.yaml || echo "Không tìm thấy token trong kubeconfig"
          echo "Kiểm tra kết nối đến Kubernetes cluster..."
          kubectl --kubeconfig=kubeconfig.yaml get nodes

      - name: Debug Kubernetes Configuration After
        run: |
          echo "Kiểm tra cấu hình kubectl với kubeconfig mới..."
          kubectl --kubeconfig=kubeconfig.yaml config view
          kubectl --kubeconfig=kubeconfig.yaml config current-context
          kubectl --kubeconfig=kubeconfig.yaml cluster-info

      - name: Update Deployment
        run: |
          echo "Checking if namespace exists..."
          kubectl --kubeconfig=kubeconfig.yaml get namespace ${{ env.NAMESPACE }} || kubectl --kubeconfig=kubeconfig.yaml create namespace ${{ env.NAMESPACE }}

          echo "Checking if deployment exists..."
          if kubectl --kubeconfig=kubeconfig.yaml get deployment nestjs-app -n ${{ env.NAMESPACE }} 2>/dev/null; then
            echo "Updating existing deployment..."
            kubectl --kubeconfig=kubeconfig.yaml set image deployment/nestjs-app nestjs-app=ducdt1999/nestjs-app:${{ env.TAG }} -n ${{ env.NAMESPACE }}
          else
            echo "Creating new deployment from manifest..."
            # Áp dụng file deployment từ repository với kustomize
            kubectl --kubeconfig=kubeconfig.yaml apply -k kubernetes/overlays/${{ env.BRANCH_NAME }} -n ${{ env.NAMESPACE }}
          fi

          echo "Checking deployment rollout status..."
          kubectl --kubeconfig=kubeconfig.yaml rollout status deployment/nestjs-app -n ${{ env.NAMESPACE }} --timeout=120s

          echo "Deployment information:"
          kubectl --kubeconfig=kubeconfig.yaml get deployment nestjs-app -n ${{ env.NAMESPACE }} -o wide
          kubectl --kubeconfig=kubeconfig.yaml get pods -n ${{ env.NAMESPACE }} -l app=nestjs-app
