name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - production
  pull_request:
    branches:
      - development
      - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps --force

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm test

  build-and-push:
    needs: build-and-test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug Docker login
        run: |
          echo "Docker login step completed"
          echo "Using username: ${{ secrets.DOCKERHUB_USERNAME != '' && 'Username is set' || 'Username is NOT set' }}"
          echo "Using token: ${{ secrets.DOCKERHUB_TOKEN != '' && 'Token is set' || 'Token is NOT set' }}"

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set environment variables based on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "development" ]; then
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          elif [ "${{ env.BRANCH_NAME }}" = "production" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
            echo "TAG=prod" >> $GITHUB_ENV
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ducdt1999/nestjs-app:${{ env.TAG }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
          cache-from: type=registry,ref=ducdt1999/nestjs-app:${{ env.TAG }}
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set environment variables based on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" = "development" ]; then
            echo "APP_NAME=nestjs-app-dev" >> $GITHUB_ENV
          elif [ "${{ env.BRANCH_NAME }}" = "production" ]; then
            echo "APP_NAME=nestjs-app-prod" >> $GITHUB_ENV
          fi

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Debug Environment Variables
        run: |
          echo "ARGOCD_SERVER is set: ${{ secrets.ARGOCD_SERVER != '' && 'Yes' || 'No' }}"
          echo "ARGOCD_USERNAME is set: ${{ secrets.ARGOCD_USERNAME != '' && 'Yes' || 'No' }}"
          echo "ARGOCD_PASSWORD is set: ${{ secrets.ARGOCD_PASSWORD != '' && 'Yes' || 'No' }}"
          echo "APP_NAME: ${{ env.APP_NAME }}"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure || {
            echo "ArgoCD login failed. Please verify server, username, and password.";
            echo "ArgoCD Server: ${{ secrets.ARGOCD_SERVER }}";
            exit 1;
          }

      - name: Sync ArgoCD Application
        run: |
          argocd app sync ${{ env.APP_NAME }} --prune || {
            echo "Failed to sync application: ${{ env.APP_NAME }}";
            echo "Checking application status:";
            argocd app get ${{ env.APP_NAME }};
            exit 1;
          }
